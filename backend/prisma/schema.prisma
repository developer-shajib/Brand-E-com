generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  COMPLETED
}

enum PaymentMethod {
  BKASH
  NAGAD
  ROCKET
  UPAY
  CREDIT_CARD
  DEBIT_CARD
  CASH_ON_DELIVERY
  BANK_TRANSFER
  PAYPAL
  STRIPE
}

enum ProductType {
  SIMPLE
  GROUP
  VARIABLE
  EXTERNAL
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
}

// Define size and color options as enums for consistency
enum ProductSize {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  // Numeric sizes
  SIZE_38
  SIZE_39
  SIZE_40
  SIZE_41
  SIZE_42
  SIZE_43
  SIZE_44
  SIZE_45
  // Other common sizes
  FREE_SIZE
  ONE_SIZE
  CUSTOM // For truly custom sizes not in the enum
}

enum ProductColor {
  RED
  GREEN
  BLUE
  BLACK
  WHITE
  YELLOW
  PURPLE
  PINK
  ORANGE
  BROWN
  GRAY
  CUSTOM
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  password      String
  phone         String?
  profileImage  String?
  userRole      UserRole   @default(CUSTOMER)
  status        UserStatus @default(ACTIVE)
  dashboardRole Role?      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId        String?    @db.ObjectId
  address       String?
  city          String?
  state         String?
  postalCode    String?
  country       String?

  // relations
  wishlist String[] @db.ObjectId
  cart     Cart?
  orders   Order[]
  reviews  Review[]

  // Account management
  emailVerified       Boolean   @default(false)
  verificationToken   String?
  resetPasswordToken  String?
  resetPasswordExpire DateTime?

  // Tracking
  lastLogin DateTime?
  trash     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  slug        String
  productType ProductType @default(SIMPLE)

  productSimple   ProductSimple?
  productVariable ProductVariableItem[]
  productGroup    ProductGroupItem[]
  productExternal ProductExternal?

  // Common product fields
  shortDesc     String?
  longDesc      String?
  specification String?
  featured      Boolean @default(false)

  // Relations
  cartItems  CartItem[]
  OrderItem  OrderItem[]
  reviews    Review[]
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId String?     @db.ObjectId
  tags       Tag[]       @relation(fields: [tagIds], references: [id])
  tagIds     String[]    @db.ObjectId
  brand      Brand?      @relation(fields: [brandId], references: [id])
  brandId    String?     @db.ObjectId

  // Status fields
  status    ProductStatus @default(ACTIVE)
  trash     Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Types for different product variations
type ProductSimple {
  regularPrice  Float
  salePrice     Float?
  productPhotos String[]
  stock         Int?     @default(0)
}

type ProductVariableItem {
  size          ProductSize
  color         ProductColor
  // For custom sizes not in the enum
  customSizes   CustomAttribute[]
  regularPrice  Float
  salePrice     Float?
  productPhotos String[]
  stock         Int?              @default(0)
  sku           String? // SKU for this specific variation
}

// For custom attributes that aren't in the enums
type CustomAttribute {
  name  String // e.g., "size", "color", "material"
  value String // e.g., "32x34", "Burgundy", "Cotton Blend"
}

type ProductGroupItem {
  name          String
  regularPrice  Float
  salePrice     Float?
  productPhotos String[]
  stock         Int?     @default(0)
}

type ProductExternal {
  regularPrice  Float
  salePrice     Float?
  productPhotos String[]
  stock         Int?     @default(0)
  link          String
}

// New models for categories, tags, and brands
model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  products  Product[]
  trash     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  slug       String    @unique
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
  trash      Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  logo      String?
  products  Product[]
  trash     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Permission  models
model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  status    Boolean  @default(true)
  trash     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  permissions String[] @db.ObjectId
  users       User[]
  status      Boolean  @default(true)
  trash       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  trash     Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  price     Float
  trash     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?       @db.ObjectId
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]
  totalAmount     Float
  shippingAddress String
  billingAddress  String?
  paymentStatus   PaymentStatus @default(PENDING)
  orderStatus     OrderStatus   @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH_ON_DELIVERY)
  trackingNumber  String?
  notes           String?
  trash           Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String?  @db.ObjectId
  product      Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productName  String
  productPrice Float
  productImage String?
  quantity     Int
  price        Float // Total price (quantity * productPrice)
  trash        Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  trash     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
